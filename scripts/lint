#!/usr/bin/env python3
import argparse
import os
import re
from pathlib import Path

from zulint.command import LinterConfig, add_default_linter_arguments

root_dir = Path(__file__).parent.parent


def run() -> None:
    parser = argparse.ArgumentParser()
    add_default_linter_arguments(parser)
    args = parser.parse_args()
    os.chdir(root_dir)
    linter_config = LinterConfig(args)

    linter_config.list_files(
        groups={
            "backend": [
                "bash",
                "json",
                "md",
                "pp",
                "py",
                "pyi",
                "sh",
                "text",
                "txt",
                "yaml",
                "yml",
            ],
            "frontend": [
                "css",
                "flow",
                "hbs",
                "html",
                "js",
                "lock",
                "ts",
            ],
        },
    )
    linter_config.external_linter(
        "ruff",
        ["ruff", "check", "--quiet"],
        ["py", "pyi"],
        fix_arg="--fix",
        description="Python linter",
    )
    linter_config.external_linter(
        "black",
        ["black"],
        ["py", "pyi"],
        description="Reformats Python code",
        check_arg=["--check"],
        suppress_line=lambda line: line == "All done! ‚ú® üç∞ ‚ú®\n"
        or re.fullmatch(r"\d+ files? would be left unchanged\.\n", line) is not None,
    )
    linter_config.external_linter(
        "mypy",
        ["mypy", ".", "--no-error-summary"],
        ["py", "pyi"],
        pass_targets=False,
        description="Static type checker for Python (config: pyproject.toml)",
    )
    linter_config.external_linter(
        "gitlint",
        ["scripts/lint-commits"],
        description="Checks commit messages for common formatting errors (config: .gitlint)",
    )
    linter_config.external_linter(
        "shellcheck",
        ["shellcheck", "-x", "-P", "SCRIPTDIR"],
        ["bash", "sh"],
        description="Standard shell script linter",
    )
    linter_config.do_lint()


if __name__ == "__main__":
    run()
